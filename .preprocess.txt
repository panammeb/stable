############# 31/10/2014 modif 03vs02 
## normalisation et calcul des indices à enlever car traitées dans post process pour les séquences affiliées aux domaines d'intérêt
## normalisation prend bcp de temps cat re-clusterisation
## remove singletons
############# 3/11/2014 
## removing files ... (fasta_split_dir, tmp, tag_tmp, pandaseq_log_dir) 

#!/usr/bin/perl
use warnings;
use strict;

use lib 'MODULES_PATH';
 

my ($USAGE) =  "\n\n\t****** USAGE of $0 PROGRAM ******\n\n\n\n\tUSAGE: perl $0 <panam.ini file> \n\n\n\n";
die "$USAGE" if ((scalar(@ARGV))< 1);
my $option_file = $ARGV[0];
chomp($option_file);

die "\n\n\t=> Cannot find configuration file: $option_file.\n\n" unless (-e $option_file);
die "\n\n\t=> Configuration file, $option_file, appears to be empty!\n\n" if (-z $option_file);


my $uclust = "USEARCH_PATH";


use parse_ini ;
my @parse = &parse_ini($option_file);

my $NGS_id_Results = $parse[0];
die "\n\n\tOutput directory for NGS analyses is not defined. Check $option_file.\n\n" unless ( defined $NGS_id_Results);
unless (-d $NGS_id_Results) { mkdir $NGS_id_Results || die "Could not create Directory $NGS_id_Results !\n"; }

my $seqFolder = $parse[19];   ### vérifier qu'il est bien dans NGS_id_Results ??!! /!\
die "\n\n\tDirectory with fasta files to be processed is not defined. Check $option_file.\n\n" unless ( defined $seqFolder);

my $MinSeqLength = $parse[4];
die "\n\n\t Min Length cutoff missed. Check $option_file.\n\n" unless ($MinSeqLength ne "");


my $Clst = $parse[20]; 
die "\n\n\t Clustering cutoff missed. Check panam.ini.\n\n" unless ($Clst <=1);
die "\n\n\t Invalid input! clustering cutoff must be specified as a fractional identity in the range 0.0 to 1.0\n\n" unless (($Clst ne "") and ($Clst >=0));

my $nbr_seq_norm = $parse[21];
die "\n\n\t Invalid number of sequences to pick for the normalization! Check panam.ini.\n\n" if ((defined $nbr_seq_norm) and ($nbr_seq_norm !~ /^\d+$/));
if (!(defined $nbr_seq_norm)) { $nbr_seq_norm = '200'}


###### ajout 05/03/2014
my $pool = $parse[22];

die "\n\n\t pooling value missed. Check panam.ini.\n\n" unless (($pool ne ""));
die "\n\n\t Invalid pooling value!\n\n" unless (($pool eq "yes") or ($pool eq "no"));	

###### ajout 21/10/2014
my $RemoveSingletons = $parse[29];

die "\n\n\t Singletons value missed. Check panam.ini.\n\n" unless (($RemoveSingletons ne ""));
die "\n\n\t Invalid Singletons value!\n\n" unless (($RemoveSingletons eq "yes") or ($RemoveSingletons eq "no"));	

### modif 10/03/2014

if ($seqFolder !~ /\/$/) { $seqFolder.="/"}
`cp $seqFolder"seqAll_checkPrimers.fasta" $NGS_id_Results `;
`rm $seqFolder"seqAll_checkPrimers.fasta" `;

my @seqFolder = <$seqFolder*fasta>;	
foreach my $file (@seqFolder) { 

	die "\n\n\tCannot find sequence file: $file. Check $option_file.\n\n" unless (-e $file);
	#die "\n\n\tSequence file, $file, appears to be empty!\n\n" if (-z $file); ### modif 10/6/2014
	
	if ( !(-z $file) ) { ### modif 10/6/2014
		my $ligne1= `sed -n '1p' $file`;
		my $ligne2= `sed -n '2p' $file`;	
		if (($ligne1 !~ /^>/) or ($ligne2 !~ /^[ATCGU]/i)) {
			die "\n\n\tYour file $file does not seem to contain sequences in fasta format.\n\n";
		}
	}
}

my %so;

##### fin ajout

my %barcodes;
my %seq; my $idSeq;

### split
foreach my $file (@seqFolder) {
	my $id;
	if ($file =~ /(\/.*)seqAll_(.*).fasta/ ) { 
		$id = $2; 

		$so{$id} = 1 ; ##### ajout 05/03/2014

		open (SS, $file) or warn "can not open file $file";
		while (<SS>) {
			if ($_=~ /^>(.*?)\n/) {
				$idSeq = $1; 
			}

			else {
				chomp($_);
				$seq{$idSeq}.=$_;
			}
		}
		close SS;
	
#		barcodes{$id}=1; #### modif 05/03/2014

		my $lines = `grep '>' -c $file`;
		chomp ($lines);
		if ($lines > 70000) { 
			`split -l 100000 -d --suffix-length=6 $file $seqFolder/$id"_splitted_"`; ##### 70000 et 100000 pour test, à voir le seuil IRL !!!!
		}
		else {
			`cp $file $seqFolder/$id"_splitted"`;
		}
	}
}

my $preprocess_output = $NGS_id_Results."/preprocess_output";
`mkdir $preprocess_output`;

my %OTU_seq; ##################### ajout 29/01/2014, on récupère l'OTU de chaque seq

### dereplicate
my @splittedFiles = <$seqFolder*splitted*> ;
foreach my $split (@splittedFiles) { 
	chomp($split);
	print "split --- $split\n"; 
	
	if ( !(-z $split) ) { ### modif 10/6/2014

		`$uclust --sort $split --output $split"_sorted" 2>&1`;
		`$uclust --input $split"_sorted" --uc $split".uc" --id 0.99 --optimal --rev 2>&1`;
		`$uclust --uc2fasta $split".uc" --input $split --output $split"_99.fasta_tmp" --types S 2>&1`;
	
		open (G, $split."_99.fasta_tmp");
		open (GG, ">".$split."_99.fasta");
		my @g = <G>;
		foreach my $e (@g) {
			if ($e =~ /^>\d+\|\*\|(.*?)\n/) {
				print GG ">".$1."\n"
			}
			else {
				print GG $e
			}
		}
		close G; close GG;
		`rm $split"_99.fasta_tmp"`; 
	} ### fin modif 10/6/2014
}

my %derep;
my @keepFiles = <$seqFolder*>;
foreach my $keep (@keepFiles) {
	### modif 10/03/2014
	if ($keep =~ /.*fasta_dir\/(.*)_splitted_.*?99.fasta/) {
		my $keep1 = $1; 	
		foreach my $tag (keys %so) { 
			if ($keep1 eq $tag) {
				`cat $keep >> $preprocess_output/$tag"_dereplicated.fasta"`
			}
		}
	### fin modif 	
	}

	### récupérer pour chaque seed dérépliquée ses réplicats

	if ($keep =~ /\.uc$/) {
		open (DER, $keep) or die "can not open file $keep !";
		while (<DER>) {
			my @t = split (/\t/, $_);	
			if ($t[0] eq "H") { 
				chomp($t[8]); chomp ($t[9]);
				$derep{$t[9]} .= $t[8].", " ;
			}
		}

		my @DER= <DER>;
		foreach my $line (@DER) {
			my @t = split (/\t/, $_);
			if ($t[0] eq "S") {	
				chomp($t[8]);
				if (exists $derep {$t[8]}) {}
				else {
					$derep{$t[8]} .= $t[8].", " ;
				}	
			}
		}
		close DER;
	 }

#	if ($keep =~ /splitted/) { `rm $keep`}
}


### cluster

opendir PREP, $preprocess_output || die "can not open $preprocess_output";
my @files = readdir PREP;

my %sample_name; my %index; my %nb_clust;

print "Clustering and rarefaction ...\n";

foreach my $file (@files) {
	my %printSeqOtu;   ### ajout 21/10/2014 afin de stocker les seq dans un hash et écrire dans le fichier Seq_OTU en pouvant controler les singletons 
	if ($file=~ /^(.*?)_dereplicated.fasta/) { 
		my %seq_sample;
		my $e = $1;
		print "Sample ---- $e\n";

		if ( !(-z $preprocess_output."/".$e."_dereplicated.fasta") ) {  
			$sample_name{$e}=1; 
		}

		open (S, $preprocess_output."/".$e."_dereplicated.fasta") or die "can not open file";
		my $aa;
		while (<S>) {
			if ($_=~ /^>(.*?)\n/) {
				$aa = $1; 
			}

			else {
				chomp($_);
				#$seq{$aa}.=$_;
				$seq_sample{$aa}.=$_
			}
		}
		close S;

		my $keys_seq_sample = keys (%seq_sample);
		$index{$e}{'derepSeq'} = $keys_seq_sample; 


		`$uclust --sort $preprocess_output"/"$e"_dereplicated.fasta" --output $preprocess_output"/"$e"_sorted" 2>&1`;
		`$uclust --input $preprocess_output"/"$e"_sorted" --uc $preprocess_output"/"$e".uc" --id $Clst --optimal --rev 2>&1`;
		`$uclust --uc2fasta $preprocess_output"/"$e".uc" --input $preprocess_output"/"$e"_dereplicated.fasta" --output $preprocess_output"/"$e"_Seq_OTU_tmp" --types S `;
		
 		open (X, $preprocess_output."/".$e."_Seq_OTU_tmp");

		my %corresp_realtofake;
		my $fake=1;
		my $fake_id;  ### modif 21/10/2014
		my @g = <X>;

		 
		foreach my $ee (@g) {
			if ($ee =~ /^>\d+\|\*\|(.*?)\n/) { 
				my $real_id = $1;
				$fake_id = $e."_OTU".$fake;   ### modif 21/10/2014 
				$corresp_realtofake{$real_id} = $fake_id;
				# print XX ">".$fake_id."\n";   ### modif 21/10/2014
				$fake++;
			}
			else {
				# print XX $ee ### modif 21/10/2014
				$printSeqOtu{$fake_id} .= $ee   ### ajout 21/10/2014
				
			}
		}
		close X; 
		# close XX;   ### modif 21/10/2014
		`rm $preprocess_output"/"$e"_Seq_OTU_tmp"`; 

		################" fin modif 19/8/2014
		
		my $resultuc = $preprocess_output."/".$e.".uc";		

		die "\n\n\tCannot find USEARCH output: $resultuc.\n\n" unless (-e $resultuc);
		die "\n\n\tUSEARCH output, $resultuc, appears to be empty!\n\n" if (-z $resultuc);  

		open (F, $preprocess_output."/".$e.".uc") ;

		my %seed; my %seed_seq;
		my $n=0; my %read_to_cluster; my $max=0;

		while (<F>) {
			my @t = split (/\t/, $_); 

			if ($t[0] eq "H") {
				if (exists $derep{$t[8]}) {
					my @x = split(/, /, $derep{$t[8]});
					my $x = $#x + 1;
					$n+= $x;
				}
				else {
					$n++
				}

				$read_to_cluster{$e}{$n}=$t[1];
				chomp ($t[9]); chomp ($t[8]);
				$seed_seq{$t[9]} .= $t[8].", " ;
				$seed{$t[9]}++ ;
			}
		
			if ($t[0] eq "S") {
				if (exists $derep{$t[8]}) {
					my @x = split(/, /, $derep{$t[8]});
					my $x = $#x + 1;
					$n+= $x;
				}
				else {
					$n++
				}
				$read_to_cluster{$e}{$n}=$t[1];	
				chomp ($t[8]);
				$seed_seq{$t[8]} .= $t[8].", " ;	
				$seed{$t[8]}++ ;
			}
		}
		close F;

		$index{$e}{'nbrOTU'} = keys (%seed);

		################## generate seeds 'files (*_Seq_OTU) and nbr_seq / OTU (*_OTU) avec les vrais abondances des OTUs dérepliqués

		my %seed_seq_fin; my %seed_fin;
		
		foreach my $k (keys %seed_seq) {
			my $replic; 
			my $seed_occ ;

			my @pp = split(/, /, $seed_seq{$k});

			foreach my $ee (@pp) {
				if (exists $derep{$ee}) {
					$replic .= $ee.", ".$derep{$ee} ; 
					my @p = split(/, /, $derep{$ee});

					##################### ajout 29/01/2014, on récupère l'OTU de chaque seq
					foreach my $q (@p) {
						$OTU_seq{$q} = $k
					}
					####################"

					my $p = $#p +2;
					$seed_occ += $p;
				}
				else {
					$replic .= $ee.", "; 
					$seed_occ++;

					##################### ajout 29/01/2014, on récupère l'OTU de chaque seq
					$OTU_seq{$ee} = $k
					####################"
				}
			}

			$seed_seq_fin{$k} = $replic;
			$seed_fin{$k} = $seed_occ;
		}

		open (R, ">".$preprocess_output."/".$e."_OTU");
		print R "OTU\tSeed sequence\t#Sequences\n";

		##### ajout 21/10/2014/ remove singletons
		
		open (XX, ">".$preprocess_output."/".$e."_Seq_OTU");
		foreach my $f ((sort { $seed_fin {$b} <=> $seed_fin {$a}} keys %seed_fin) ){ 
			if ($RemoveSingletons eq "yes") {
				if ($seed_fin{$f} != 1) { 
					print R "$corresp_realtofake{$f}\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n";  
					print XX ">$corresp_realtofake{$f}\n$printSeqOtu{$corresp_realtofake{$f}}\n";
				}
			}
			if ($RemoveSingletons eq "no") { 
				print R "$corresp_realtofake{$f}\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n"; 
				print XX ">$corresp_realtofake{$f}\n$printSeqOtu{$corresp_realtofake{$f}}\n";
			}
		}	
		close R;	
		close XX;

		##### fin ajout 21/10/2014 



		#### modif 31/10/2014 pas de calcul d'indices /!\
		#.
		#.
		#####################################################

	}
}

############################### modif 31/10/2014 pas de normalisation /!\
#.
#.
##############################################################################


#################### $pool

opendir DIRPREP, $preprocess_output or die "can not open $preprocess_output";
my @filesprep = readdir DIRPREP ;

if ($pool eq "no") {
	foreach my $f (@filesprep) { 
		if (($f =~ /Seq_OTU/)) {
			 `cat $preprocess_output/$f >>  $NGS_id_Results/All_Seq_OTU_$Clst` 
		}
	}
	print "\nSamples description printed in index_$Clst file.\nOTUs printed in All_Seq_OTU_$Clst file.\nYou can now process All_Seq_OTU_$Clst with panam.pl\n\n";
}
close DIRPREP; 


if ($pool eq "yes") {
	
	print "\nProcessing pooled samples ..\n\n";	
	
	my $pooled_sample = $preprocess_output."/pooled_sample/";
	`mkdir $pooled_sample`;
	
	foreach my $file (@seqFolder) {
		#`cat $file >> $pooled_sample"seqAll_pooledSample.fasta"`;  #### modif 21/8/2014
		`cat $file >> $pooled_sample"pooled_sample_Seq.fasta"`;  #### modif 21/8/2014
		
	}

	# my $pooled = $pooled_sample."seqAll_pooledSample.fasta";    #### modif 21/8/2014
	my $pooled = $pooled_sample."pooled_sample_Seq.fasta";    #### modif 21/8/2014


	my $lines = `grep '>' -c $pooled`;
	chomp ($lines);
	if ($lines > 70000) { 
		`split -l 100000 -d --suffix-length=6 $pooled $pooled_sample"pooledSample_splitted_"`; ##### 70000 et 100000 pour test
	}
	else {
		`cp $pooled $pooled_sample"pooledSample_splitted"`;
	}


	my @splittedFiles = <$pooled_sample*splitted*> ;
	foreach my $split (@splittedFiles) { 
		`$uclust --sort $split --output $split"_sorted" 2>&1`;
		`$uclust --input $split"_sorted" --uc $split".uc" --id 0.99 --optimal --rev 2>&1`;
		`$uclust --uc2fasta $split".uc" --input $split --output $split"_99.fasta_tmp" --types S 2>&1`;
	
		open (G, $split."_99.fasta_tmp");
		open (GG, ">".$split."_99.fasta");
		my @g = <G>;
		foreach my $e (@g) {
			if ($e =~ /^>\d+\|\*\|(.*?)\n/) {
				print GG ">".$1."\n"
			}
			else {
				print GG $e
			}
		}
		close G; close GG;
		`rm $split"_99.fasta_tmp"`; 
	}

	my %derep;
	my @keepFiles = <$pooled_sample*>;
	foreach my $keep (@keepFiles) { 
		if ($keep =~ /.*pooled_sample\/(.*)_splitted_.*?99.fasta$/) {
			`cat $keep >> $pooled_sample"pooledSample_dereplicated.fasta"` ;
		}

		### récupérer pour chaque seed dérépliquée ses réplicats

		if ($keep =~ /\.uc$/) {
			open (DER, $keep) or die "can not open file $keep !";
			while (<DER>) {
				my @t = split (/\t/, $_);	
				if ($t[0] eq "H") { 
					chomp($t[8]); chomp ($t[9]);
					$derep{$t[9]} .= $t[8].", " ;
				}
			}

			my @DER= <DER>;
			foreach my $line (@DER) {
				my @t = split (/\t/, $_);
				if ($t[0] eq "S") {	
					chomp($t[8]);
					if (exists $derep {$t[8]}) {}
					else {
						$derep{$t[8]} .= $t[8].", " ;
					}	
				}
			}
			close DER;
		 }
		if ($keep =~ /splitted/) { `rm $keep`}
	}

	##############
	my %seq_sample;
	my %nb_clust;

	open (S, $pooled_sample."pooledSample_dereplicated.fasta") or die "can not open file";
	my $aa;
	while (<S>) {
		if ($_=~ /^>(.*?)\n/) {
			$aa = $1; 
		}
		else {
			chomp($_);
			$seq_sample{$aa}.=$_
		}
	}
	close S;

	my $keys_seq_sample = keys (%seq_sample);

	`$uclust --sort $pooled_sample"pooledSample_dereplicated.fasta" --output $pooled_sample"pooledSample_sorted" 2>&1`;
	`$uclust --input $pooled_sample"pooledSample_sorted" --uc $pooled_sample"pooledSample.uc" --id $Clst --optimal --rev 2>&1`;
	`$uclust --uc2fasta $pooled_sample"pooledSample.uc" --input $pooled_sample"pooledSample_dereplicated.fasta" --output $pooled_sample"pooledSample_Seq_OTU_tmp" --types S `;
		
 	open (X, $pooled_sample."pooledSample_Seq_OTU_tmp");
	
	my %corresp_realtofake;
	my $fake=1;
	my $fake_id; #### modif 21/10/2014
	my @g = <X>;

	my %printSeqOtu;  ### ajout 21/10/2014 afin de stocker les seq dans un hash et écrire dans le fichier Seq_OTU en pouvant controler les singletons pour pooled
	
	foreach my $e (@g) {		
		if ($e =~ /^>\d+\|\*\|(.*?)\n/) {
			my $real_id = $1; 
			my @real = split (/_/,$real_id);
			$fake_id = $real[0]."_OTU".$fake;   ### modif 21/10/2014 
			$corresp_realtofake {$real_id} = $fake_id;
			#print XX ">".$fake_id."\n";   ### ajout 21/10/2014
			$fake++;
		}
		else {
			# print XX $e   ### ajout 21/10/2014
			$printSeqOtu{$fake_id} .= $e   ### ajout 21/10/2014
			
		}
	}
	close X; 
	#close XX;   ### ajout 21/10/2014
	`rm $pooled_sample"pooledSample_Seq_OTU_tmp"`; 

	################" fin modif 19/8/2014

		
	my $resultuc = $pooled_sample."pooledSample.uc";		

	die "\n\n\tCannot find USEARCH output: $resultuc.\n\n" unless (-e $resultuc);
	die "\n\n\tUSEARCH output, $resultuc, appears to be empty!\n\n" if (-z $resultuc);

	open (F, $resultuc) ;

	my %seed; my %seed_seq;
	my $n=0; my %read_to_cluster; my $max=0;

	while (<F>) {
		my @t = split (/\t/, $_); 
		if ($t[0] eq "H") {
			if (exists $derep{$t[8]}) {
				my @x = split(/, /, $derep{$t[8]});
				my $x = $#x + 1;
				$n+= $x;
			}
			else {
				$n++
			}

			$read_to_cluster{$n}=$t[1];
			chomp ($t[9]); chomp ($t[8]);
			$seed_seq{$t[9]} .= $t[8].", " ;
			$seed{$t[9]}++ ;
		}
		
		if ($t[0] eq "S") {
			if (exists $derep{$t[8]}) {
				my @x = split(/, /, $derep{$t[8]});
				my $x = $#x + 1;
				$n+= $x;
			}
			else {
				$n++
			}
			$read_to_cluster{$n}=$t[1];	
			chomp ($t[8]);
			$seed_seq{$t[8]} .= $t[8].", " ;	
			$seed{$t[8]}++ ;
		}
	}
	close F;

	################## generate seeds 'files (*_Seq_OTU) and nbr_seq / OTU (*_OTU) avec les vrais abondances des OTUs dérepliqués

	my %seed_seq_fin; my %seed_fin;
	
	foreach my $k (keys %seed_seq) {
		my $replic; 
		my $seed_occ ;
		my @pp = split(/, /, $seed_seq{$k});
		foreach my $ee (@pp) {
			if (exists $derep{$ee}) {
				$replic .= $ee.", ".$derep{$ee} ; 
				my @p = split(/, /, $derep{$ee});
				foreach my $q (@p) {
					$OTU_seq{$q} = $k
				}


				my $p = $#p +2;
				$seed_occ += $p;
			}
			else {
				$replic .= $ee.", "; 
				$seed_occ++;
				$OTU_seq{$ee} = $k
			}
		}

		$seed_seq_fin{$k} = $replic;
		$seed_fin{$k} = $seed_occ;
	}

	open (R, ">".$pooled_sample."pooled_sample_OTU");
	print R "OTU\tSeed sequence\t#Sequences\n";

	##### modif 19/8/2014
	#my $i=1;

	open (XX, ">".$pooled_sample."pooled_sample_SEQ_OTU");
	foreach my $f ((sort { $seed_fin {$b} <=> $seed_fin {$a}} keys %seed_fin) ){

		#print R "$i\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n"; ##### modif 19/8/2014
		#$i++ ##### modif 19/8/2014			

		##### ajout 21/10/2014/ remove singletons
		#print R "$corresp_realtofake{$f}\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n"; ##### modif 19/8/2014	
		
		if ($RemoveSingletons eq "yes") {
			if ($seed_fin{$f} != 1) { 
				print R "$corresp_realtofake{$f}\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n";  
				print XX ">$corresp_realtofake{$f}\n$printSeqOtu{$corresp_realtofake{$f}}\n";
			}
		}
		if ($RemoveSingletons eq "no") { 
			print R "$corresp_realtofake{$f}\t$f\t$seed_fin{$f}\t$seed_seq_fin{$f}\n"; 
			print XX ">$corresp_realtofake{$f}\n$printSeqOtu{$corresp_realtofake{$f}}\n";
		}		
	}
	close R; 
	close XX;	
	##### fin ajout 21/10/2014 


	##### fin modif 19/8/2014

	print "\nSamples description printed in index_$Clst file.\nOTUs of environments clustered together are printed in $pooled_sample/pooled_sample_SEQ_OTU file.\nYou can now process $pooled_sample/pooled_sample_SEQ_OTU with panam.pl\n\n";
}
 

print "Removing files ...\n" ;
`rm -r $NGS_id_Results/fasta_split_dir`;
`rm -r $NGS_id_Results/tmp`;
`rm -r $NGS_id_Results/tag_tmp`;
`rm -r $NGS_id_Results/pandaseq_log_dir`;

